#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ AutoHE
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML, CSS, JavaScript —Ñ–∞–π–ª—ã
–£—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏, –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏, —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
"""

import os
import re
import sys
from pathlib import Path

def remove_html_comments(content):
    """–£–¥–∞–ª—è–µ—Ç HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ <!-- -->"""
    # –£–¥–∞–ª—è–µ–º HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ IE
    pattern = r'<!--(?!\[if).*?-->'
    return re.sub(pattern, '', content, flags=re.DOTALL)

def remove_css_comments(content):
    """–£–¥–∞–ª—è–µ—Ç CSS –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ /* */"""
    result = []
    i = 0
    in_string = False
    string_char = None
    
    while i < len(content):
        char = content[i]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
        if not in_string and char in ['"', "'"]:
            in_string = True
            string_char = char
            result.append(char)
        elif in_string and char == string_char:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–∏–º–≤–æ–ª
            escaped = False
            j = i - 1
            while j >= 0 and content[j] == '\\':
                escaped = not escaped
                j -= 1
            if not escaped:
                in_string = False
                string_char = None
            result.append(char)
        elif in_string:
            result.append(char)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        elif not in_string and i < len(content) - 1 and content[i:i+2] == '/*':
            # –ò—â–µ–º –∫–æ–Ω–µ—Ü –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            end = content.find('*/', i + 2)
            if end != -1:
                i = end + 1  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            else:
                i = len(content)  # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–≥–∞, –∏–¥—ë–º –¥–æ –∫–æ–Ω—Ü–∞
            continue
        else:
            result.append(char)
        
        i += 1
    
    return ''.join(result)

def remove_js_comments(content):
    """–£–¥–∞–ª—è–µ—Ç JavaScript –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ // –∏ /* */"""
    result = []
    lines = content.split('\n')
    
    for line_num, line in enumerate(lines):
        cleaned_line = remove_js_comments_from_line(line)
        result.append(cleaned_line)
    
    # –£–¥–∞–ª—è–µ–º –±–ª–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ /* */
    content = '\n'.join(result)
    return remove_css_comments(content)  # CSS –∏ JS –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –±–ª–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

def remove_js_comments_from_line(line):
    """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ // –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    result = []
    i = 0
    in_string = False
    string_char = None
    in_regex = False
    
    while i < len(line):
        char = line[i]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
        if not in_string and not in_regex and char in ['"', "'", '`']:
            in_string = True
            string_char = char
            result.append(char)
        elif in_string and char == string_char:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            escaped = False
            j = i - 1
            while j >= 0 and line[j] == '\\':
                escaped = not escaped
                j -= 1
            if not escaped:
                in_string = False
                string_char = None
            result.append(char)
        elif in_string:
            result.append(char)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        elif not in_string and not in_regex and char == '/' and i > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å –Ω–∞—á–∞–ª–æ–º regex
            prev_chars = line[:i].strip()
            if (prev_chars.endswith(('=', '(', '[', ',', ':', ';', '!', '&', '|', '?', '+', '-', '*', '/', '%', '{', '}', 'return')) or
                prev_chars == '' or re.search(r'[=(!&|?+\-*/%{},:]$', prev_chars)):
                in_regex = True
            result.append(char)
        elif in_regex and char == '/':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            escaped = False
            j = i - 1
            while j >= 0 and line[j] == '\\':
                escaped = not escaped
                j -= 1
            if not escaped:
                in_regex = False
            result.append(char)
        elif in_regex:
            result.append(char)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        elif not in_string and not in_regex and i < len(line) - 1 and line[i:i+2] == '//':
            # –ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –æ–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É
            break
        else:
            result.append(char)
        
        i += 1
    
    return ''.join(result).rstrip()

def clean_file(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_size = len(content)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—á–∏—Å—Ç–∫—É
        if file_path.suffix.lower() == '.html':
            content = remove_html_comments(content)
        elif file_path.suffix.lower() == '.css':
            content = remove_css_comments(content)
        elif file_path.suffix.lower() == '.js':
            content = remove_js_comments(content)
        else:
            print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_path}")
            return False
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–æ–ª–µ–µ 2 –ø–æ–¥—Ä—è–¥)
        content = re.sub(r'\n{3,}', '\n\n', content)
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
        content = '\n'.join(line.rstrip() for line in content.split('\n'))
        
        new_size = len(content)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if original_size != new_size:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            saved_bytes = original_size - new_size
            print(f"‚úÖ {file_path.name}: -{saved_bytes} –±–∞–π—Ç ({saved_bytes/original_size*100:.1f}%)")
            return True
        else:
            print(f"‚ûñ {file_path.name}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ AutoHE")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
    project_dir = Path(__file__).parent
    
    # –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    file_patterns = [
        '*.html',
        '*.css', 
        '*.js'
    ]
    
    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
    exclude_files = {
        '.htaccess',
        'clean_comments.py',
        'node_modules',
        '.git'
    }
    
    total_files = 0
    processed_files = 0
    
    for pattern in file_patterns:
        for file_path in project_dir.rglob(pattern):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if any(exc in str(file_path) for exc in exclude_files):
                continue
                
            total_files += 1
            if clean_file(file_path):
                processed_files += 1
    
    print("=" * 50)
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_files}/{total_files} —Ñ–∞–π–ª–æ–≤")
    
    if processed_files > 0:
        print("‚ú® –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ÑπÔ∏è  –§–∞–π–ª—ã —É–∂–µ –æ—á–∏—â–µ–Ω—ã –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == '__main__':
    main() 