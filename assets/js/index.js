(function(){
  const examples = [
    {
      id: 'demo_greeting',
      title: 'üéÆ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞',
      typeLabel: '–°—é–∂–µ—Ç–Ω—ã–π',
      blocks: [
        { cls: 'event', text: '–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ –º–∏—Ä (EntryPoint)' },
        { cls: 'action', text: '–¥–∏–∞–ª–æ–≥: –∏—Å—Ç–æ—á–Ω–∏–∫ [–ò–≥—Ä–æ–∫] —Ç–µ–∫—Å—Ç "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"' }
      ],
      desc: '–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ.'
    },
    {
      id: 'demo_trader',
      title: 'üí∞ –¢–æ—Ä–≥–æ–≤–µ—Ü –≤ –¥–µ—Ä–µ–≤–Ω–µ',
      typeLabel: '–°—é–∂–µ—Ç–Ω—ã–π',
      blocks: [
        { cls: 'event', text: '–ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–∏—Ä (JoinScript)' },
        { cls: 'action', text: '—Å–æ–∑–¥–∞—Ç—å –ù–ò–ü id villager01, –º–æ–¥–µ–ª—å villager, pos 0 64 0' },
        { cls: 'action', text: '—Ç—Ä–µ–π–¥—ã: –∏–∑—É–º—Ä—É–¥ ‚Üí —Ö–ª–µ–±' }
      ],
      desc: '–°–æ–∑–¥–∞—ë—Ç –ù–ò–ü–∞-—Ç–æ—Ä–≥–æ–≤—Ü–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å–¥–µ–ª–∫—É.'
    },
    {
      id: 'demo_quest',
      title: 'üß≠ –ö–≤–µ—Å—Ç –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã',
      typeLabel: '–°—é–∂–µ—Ç–Ω—ã–π',
      blocks: [
        { cls: 'event', text: '–ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–∏—Ä (JoinScript)' },
        { cls: 'action', text: '–ù–ò–ü –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã: +item("wood", 16)' }
      ],
      desc: '–ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤.'
    }
  ];

  const grid = document.getElementById('examplesGrid');
  if(!grid) return;

  function render(){
    grid.innerHTML = '';
    examples.forEach(ex => {
      const el = document.createElement('div'); el.className = 'example-card card pop-in';
      el.innerHTML = `
        <div class="example-header">
          <h3>${ex.title}</h3>
          <span class="example-type">${ex.typeLabel}</span>
        </div>
        <div class="example-blocks">
          ${ex.blocks.map(b=>`<div class="block ${b.cls}">${b.text}</div>`).join('')}
        </div>
        <p class="example-desc">${ex.desc}</p>
        <div class="card-actions">
          <button class="btn btn-primary" data-import>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        </div>
      `;
      el.querySelector('[data-import]').onclick = ()=> importExample(ex);
      grid.appendChild(el);
    });
  }

  function stateDemoGreeting(){
    return {
      blocks: {
        blocks: [
          {
            type: 'trigger_entry_point', x: 25, y: 25,
            next: { block: {
              type: 'create_npc',
              fields: { ID: 'guide', NAME: '–ì–∏–¥', MODEL_ID: '__NO_MODEL__', X: 0, Y: 64, Z: 0 },
              next: { block: {
                type: 'dialog_tellraw',
                fields: { SOURCE: 'guide', TEXT: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä!' },
                next: { block: {
                  type: 'wait_seconds', fields: { SECS: 2 },
                  next: { block: {
                    type: 'npc_set_running', fields: { NPC: 'guide', RUN: 'TRUE' },
                    next: { block: {
                      type: 'npc_move_to',
                      fields: { NPC: 'guide', MODE: 'ALWAYS', TARGET_KIND: 'PLAYER' },
                      next: { block: {
                        type: 'wait_seconds', fields: { SECS: 4 },
                        next: { block: {
                          type: 'npc_set_running', fields: { NPC: 'guide', RUN: 'FALSE' },
                          next: { block: {
                            type: 'npc_look_at',
                            fields: { NPC: 'guide', MODE: 'ALWAYS', TARGET_KIND: 'PLAYER' },
                            next: { block: {
                              type: 'dialog_tellraw', fields: { SOURCE: 'guide', TEXT: '–°–ª–µ–¥—É–π –∑–∞ –º–Ω–æ–π!' },
                              next: { block: {
                                type: 'wait_seconds', fields: { SECS: 2 },
                                next: { block: {
                                  type: 'npc_look_at', fields: { NPC: 'guide', MODE: 'STOP', TARGET_KIND: 'PLAYER' },
                                  next: { block: {
                                    type: 'npc_move_to', fields: { NPC: 'guide', MODE: 'STOP', TARGET_KIND: 'PLAYER' }
                                  }}
                                }}
                              }}
                            }}
                          }}
                        }}
                      }}
                    }}
                  }}
                }}
              }}
            }}
          }
        ]
      }
    };
  }

  function stateDemoTrader(){
    return {
      blocks: {
        blocks: [
          {
            type: 'trigger_join_script', x: 25, y: 25,
            next: { block: {
              type: 'create_npc',
              fields: { ID: 'villager01', NAME: '–¢–æ—Ä–≥–æ–≤–µ—Ü', MODEL_ID: '__NO_MODEL__', X: 0, Y: 64, Z: 0 },
              next: { block: {
                type: 'npc_move_to',
                fields: { NPC: 'villager01', MODE: 'ONCE', TARGET_KIND: 'POS', X: 5, Y: 64, Z: 5 },
                next: { block: {
                  type: 'npc_look_at', fields: { NPC: 'villager01', MODE: 'ALWAYS', TARGET_KIND: 'PLAYER' },
                  next: { block: {
                    type: 'dialog_tellraw', fields: { SOURCE: 'villager01', TEXT: '–ü–æ–¥—Ö–æ–¥–∏! –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –æ–∫—Ä—É–≥–µ!' },
                    next: { block: {
                      type: 'npc_trades',
                      fields: { NPC: 'villager01' },
                      inputs: {
                        OFFERS: {
                          shadow: { type: 'trade_offer', fields: {} },
                          block: {
                            type: 'trade_offer',
                            fields: {
                              P1_ID: 'minecraft:emerald', P1_CNT: 1, P1_NBT: '',
                              P2_ID: '', P2_CNT: 1, P2_NBT: '',
                              IT_ID: 'minecraft:bread', IT_CNT: 3, IT_NBT: '',
                              MAX: 24, XP: 1, PM: 0
                            },
                            next: { block: {
                              type: 'trade_offer',
                              fields: {
                                P1_ID: 'minecraft:emerald', P1_CNT: 5, P1_NBT: '',
                                P2_ID: '', P2_CNT: 1, P2_NBT: '',
                                IT_ID: 'minecraft:iron_sword', IT_CNT: 1, IT_NBT: '',
                                MAX: 12, XP: 5, PM: 0
                              }
                            }}
                          }
                        }
                      },
                      next: { block: {
                        type: 'dialog_tellraw', fields: { SOURCE: 'villager01', TEXT: '–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â—ë!' },
                        next: { block: {
                          type: 'wait_seconds', fields: { SECS: 2 },
                          next: { block: {
                            type: 'npc_look_at', fields: { NPC: 'villager01', MODE: 'STOP', TARGET_KIND: 'PLAYER' }
                          }}
                        }}
                      }}
                    }}
                  }}
                }}
              }}
            }}
          }
        ]
      }
    };
  }

  function stateDemoQuest(){
    return {
      blocks: {
        blocks: [
          {
            type: 'trigger_join_script', x: 25, y: 25,
            next: { block: {
              type: 'create_npc',
              fields: { ID: 'quest_giver', NAME: '–ö–≤–µ—Å—Ç–æ–¥–∞—Ç–µ–ª—å', MODEL_ID: '__NO_MODEL__', X: 0, Y: 64, Z: 0 },
              next: { block: {
                type: 'dialog_tellraw', fields: { SOURCE: 'quest_giver', TEXT: '–ü—Ä–∏–Ω–µ—Å–∏ –º–Ω–µ 16 –±—Ä—ë–≤–µ–Ω –¥—É–±–∞.' },
                next: { block: {
                  type: 'npc_request_items', fields: { NPC: 'quest_giver' },
                  inputs: {
                    REQS: {
                      shadow: { type: 'quest_item_req', fields: {} },
                      block: {
                        type: 'quest_item_req',
                        fields: { ITEM: 'minecraft:oak_log', COUNT: 16, NBT: '' }
                      }
                    }
                  },
                  next: { block: {
                    type: 'trigger_players_input_text', fields: { TEXT: '–≥–æ—Ç–æ–≤–æ' },
                    next: { block: {
                      type: 'dialog_tellraw', fields: { SOURCE: 'quest_giver', TEXT: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ù–∞–≥—Ä–∞–¥–∞ —Ç–≤–æ—è.' },
                      next: { block: {
                        type: 'npc_move_to', fields: { NPC: 'quest_giver', MODE: 'ONCE', TARGET_KIND: 'POS', X: 0, Y: 64, Z: 10 },
                        next: { block: {
                          type: 'wait_seconds', fields: { SECS: 1 },
                          next: { block: {
                            type: 'npc_despawn', fields: { NPC: 'quest_giver' }
                          }}
                        }}
                      }}
                    }}
                  }}
                }}
              }}
            }}
          }
        ]
      }
    };
  }

  function buildStateById(id){
    if(id === 'demo_greeting') return stateDemoGreeting();
    if(id === 'demo_trader') return stateDemoTrader();
    if(id === 'demo_quest') return stateDemoQuest();
    return null;
  }

  async function importExample(ex){
    const p = AutoHE.createProject(ex.title.replace(/^[^\p{L}\p{N}]+/u,'').slice(0,40));
    const script = AutoHE.addScript(p.id, 'story', 'main_story');
    const state = buildStateById(ex.id);
    if(state){ script.blocksState = JSON.stringify(state); }
    script.kotlin = `// demo: ${ex.id}`;
    AutoHE.updateScript(p.id, script);
    try{
      const resp = await fetch('assets/presets/classic.gltf');
      if(resp.ok){
        const blob = await resp.blob();
        const entry = AutoHE.addModel(p.id, { name: 'classic', ext: 'gltf', resourceId: '', animations: [] });
        try { await AutoHE.saveModelBlob(p.id, entry.id, blob); } catch(_){ }
      }
    } catch(_){ }
    AutoHE.go(`project.html?id=${p.id}`);
  }

  render();
})();