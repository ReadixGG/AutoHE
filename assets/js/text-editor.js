// ========================
// –¢–ï–ö–°–¢–û–í–´–ô –†–ï–î–ê–ö–¢–û–† –î–ò–ê–õ–û–ì–û–í
// ========================

(() => {
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º AutoHE API
  const AutoHE = window.AutoHE;
  
  let currentProject = null;
  let currentScript = null;
  let projectId = null;
  let scriptId = null;
  let existingNPCs = new Set(); // –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  let existingNpcModelsByName = new Map(); // name -> modelId, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∏–∑ blocksState –ø—Ä–æ–µ–∫—Ç–∞
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  document.addEventListener('DOMContentLoaded', () => {
    loadProjectAndScript();
    initTextEditor();
  });
  
  function loadProjectAndScript() {
    const urlParams = new URLSearchParams(window.location.search);
    projectId = urlParams.get('projectId');
    scriptId = urlParams.get('scriptId');
    const npcData = urlParams.get('npcs');
    
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞:', { projectId, scriptId, npcData });
    
    if (!projectId || !scriptId) {
      alert('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç');
      window.location.href = 'projects.html';
      return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö NPC –∏–∑ URL
    if (npcData) {
      try {
        console.log('NPC –¥–∞–Ω–Ω—ã–µ –∏–∑ URL (–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):', npcData);
        const decoded = atob(npcData);
        console.log('NPC –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ atob:', decoded);
        const npcArray = JSON.parse(decodeURIComponent(decoded));
        console.log('NPC –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ JSON.parse:', npcArray);
        existingNPCs = new Set(npcArray);
        console.log('–ü–æ–ª—É—á–µ–Ω—ã NPC –∏–∑ URL:', [...existingNPCs]);
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è NPC:', e);
        console.error('–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:', e.stack);
        existingNPCs = new Set();
      }
    } else {
      console.log('NPC –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ URL');
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API AutoHE –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    currentProject = AutoHE.getProject(projectId);
    currentScript = AutoHE.getScript(projectId, scriptId);
    
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç:', currentProject);
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω —Å–∫—Ä–∏–ø—Ç:', currentScript);
    
    if (!currentProject || !currentScript) {
      alert('–ü—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      window.location.href = 'projects.html';
      return;
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö NPC –∏–∑ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    try {
      existingNpcModelsByName = new Map();
      if (currentProject && Array.isArray(currentProject.scripts)) {
        currentProject.scripts.forEach(s => {
          if (!s || !s.blocksState) return;
          try {
            const state = JSON.parse(s.blocksState);
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –ª—é–±—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä JSON
            const visit = (node) => {
              if (!node || typeof node !== 'object') return;
              if (Array.isArray(node)) { node.forEach(visit); return; }
              // –ï—Å–ª–∏ —ç—Ç–æ –±–ª–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è NPC ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ –º–æ–¥–µ–ª—å
              if (node.type === 'create_npc') {
                const fields = node.fields;
                let name = null;
                let model = null;
                if (fields && typeof fields === 'object' && !Array.isArray(fields)) {
                  name = fields.NAME || fields['NAME'] || null;
                  model = fields.MODEL_ID || fields['MODEL_ID'] || null;
                }
                // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±—Ö–æ–¥–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                if ((!name || !model) && Array.isArray(fields)) {
                  try {
                    const byName = new Map(fields.map(f => [f && (f.name || f.field), f && (f.value || f.val)]));
                    name = name || byName.get('NAME') || null;
                    model = model || byName.get('MODEL_ID') || null;
                  } catch(_) {}
                }
                if (name && model) {
                  existingNpcModelsByName.set(String(name), String(model));
                }
              }
              // –û–±—Ö–æ–¥ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤, –≤–∫–ª—é—á–∞—è next.block
              Object.keys(node).forEach(k => {
                if (k === 'next' && node.next && node.next.block) visit(node.next.block);
                else visit(node[k]);
              });
            };
            visit(state);
          } catch(_) {}
        });
      }
      try { console.log('üì¶ –ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏ NPC –≤ –ø—Ä–æ–µ–∫—Ç–µ:', Array.from(existingNpcModelsByName.entries())); } catch(_) {}
    } catch(_) {}

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    document.getElementById('projectName').textContent = 
      `${currentProject.name} ‚Üí ${currentScript.name}`;
  }
  
  const textEditor = {
    npcs: new Set(),
    autocompleteDropdown: null,
    
    // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –≤ ID
    nameToId(name) {
      const translit = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
      };
      
      return name.toLowerCase()
        .split('')
        .map(char => translit[char] || char)
        .join('')
        .replace(/[^a-z0-9]/g, '_')
        .replace(/_+/g, '_')
        .replace(/^_|_$/g, '');
    },
    
    init() {
      this.setupEventListeners();
      this.detectNPCs(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ NPC
    },
    
    setupEventListeners() {
      // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
      document.getElementById('backToProjectBtn').addEventListener('click', () => {
        if (projectId && scriptId) {
          window.location.href = `editor.html?projectId=${projectId}&scriptId=${scriptId}`;
        } else {
          window.location.href = 'projects.html';
        }
      });
      
      // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
      const textarea = document.getElementById('dialogTextarea');
      textarea.addEventListener('input', () => {
        this.updateLineCounter();
        this.detectNPCs();
      });
      
      textarea.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          e.preventDefault();
          this.handleTabCompletion();
        }
        if (e.key === 'Escape') {
          this.hideAutocomplete();
        }
      });
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
      document.getElementById('triggerType').addEventListener('change', (e) => {
        const keyGroup = document.getElementById('keySettingGroup');
        keyGroup.style.display = e.target.value === 'key' ? 'block' : 'none';
      });
      
      // –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤
      document.getElementById('generateBlocksBtn').addEventListener('click', () => {
        this.generateBlocks();
      });
    },
    
    updateLineCounter() {
      const textarea = document.getElementById('dialogTextarea');
      const lines = textarea.value.split('\n').length;
      document.getElementById('lineCounter').textContent = lines;
    },
    
    getExistingNPCs() {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º NPC, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞—Ä–∞–Ω–µ–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö NPC:', [...existingNPCs]);
      return existingNPCs;
    },
    
    detectNPCs() {
      const textarea = document.getElementById('dialogTextarea');
      const text = textarea.value;
      const lines = text.split('\n');
      
      const detectedNPCs = new Set();
      
      console.log('detectNPCs –≤—ã–∑–≤–∞–Ω, existingNPCs:', [...existingNPCs]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö NPC –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
      existingNPCs.forEach(npc => detectedNPCs.add(npc));
      
      // –î–æ–±–∞–≤–ª—è–µ–º NPC –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
      lines.forEach(line => {
        const trimmed = line.trim();
        if (trimmed && trimmed.includes(':')) {
          const speaker = trimmed.split(':')[0].trim();
          if (speaker && speaker !== '–ò–≥—Ä–æ–∫' && speaker !== '–∏–≥—Ä–æ–∫') {
            detectedNPCs.add(speaker);
          }
        }
      });
      
      console.log('–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ NPC:', [...detectedNPCs]);
      console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ NPC:', [...existingNPCs]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ NPC, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (detectedNPCs.size !== this.npcs.size || 
          [...detectedNPCs].some(npc => !this.npcs.has(npc))) {
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ NPC, —Å—Ç–∞—Ä—ã–π —Ä–∞–∑–º–µ—Ä:', this.npcs.size, '–Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä:', detectedNPCs.size);
        this.npcs = detectedNPCs;
        this.updateNPCList();
      } else {
        console.log('–°–ø–∏—Å–æ–∫ NPC –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
      }
    },
    
    updateNPCList() {
      const npcList = document.getElementById('npcList');
      
      console.log('updateNPCList –≤—ã–∑–≤–∞–Ω, npcs:', [...this.npcs]);
      
      if (this.npcs.size === 0) {
        npcList.innerHTML = '<div class="no-npcs">–î–æ–±–∞–≤—å—Ç–µ NPC –≤ –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö</div>';
        return;
      }
      
      const existingNPCs = this.getExistingNPCs();
      console.log('existingNPCs –≤ updateNPCList:', [...existingNPCs]);
      
      let html = '';
      this.npcs.forEach(npcName => {
        const safeName = npcName.replace(/'/g, "\\'");
        const isExisting = existingNPCs.has(npcName);
        const statusBadge = isExisting ? '<span class="npc-status existing">–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞</span>' : '<span class="npc-status new">–Ω–æ–≤—ã–π</span>';
        
        console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NPC: ${npcName}, isExisting: ${isExisting}`);
        
        html += `
          <div class="npc-item">
            <div class="npc-name">${npcName} ${statusBadge}</div>
            <div class="npc-settings">
              <div class="npc-setting">
                <label>–ú–æ–¥–µ–ª—å:</label>
                <select class="npc-model" data-npc="${safeName}" ${isExisting ? 'disabled title="NPC —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ"' : ''}>
                  <option value="">–í—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞...</option>
                  ${this.getModelOptions()}
                </select>
              </div>
              <div class="npc-setting head-setting" style="display:none;">
                <label>–ì–æ–ª–æ–≤–∞:</label>
                <select class="npc-head" data-npc="${safeName}" ${isExisting ? 'disabled' : ''}>
                  <option value="">–í—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞...</option>
                  ${this.getHeadOptions()}
                </select>
              </div>
            </div>
          </div>
        `;
      });
      
      npcList.innerHTML = html;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –≥–æ–ª–æ–≤—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
      this.updateHeadVisibility();
      
      // –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö NPC (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ)
      try {
        npcList.querySelectorAll('.npc-model').forEach(select => {
          const container = select.closest('.npc-item');
          const titleEl = container ? container.querySelector('.npc-name') : null;
          let npcName = null;
          if (titleEl) {
            // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª –¥–æ –±—ç–π–¥–∂–∞ —Å—Ç–∞—Ç—É—Å–∞
            const firstNode = titleEl.childNodes[0];
            npcName = firstNode ? String(firstNode.textContent || '').trim() : null;
          }
          if (npcName) {
            const modelId = existingNpcModelsByName.get(npcName);
            if (modelId) {
              select.value = modelId;
            }
          }
        });
      } catch(_) {}

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ NPC
      npcList.querySelectorAll('.npc-model').forEach(select => {
        select.addEventListener('change', () => {
          this.updateHeadVisibility();
        });
      });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞
      document.getElementById('chatType').addEventListener('change', () => {
        this.updateHeadVisibility();
      });
    },
    
    getModelOptions() {
      // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –æ–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞; –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
      const models = [];

      try {
        const apiModels = AutoHE.getModels(projectId);
        if (Array.isArray(apiModels)) {
          apiModels.forEach(m => { if (m && m.id) models.push([m.name || m.id, m.id]); });
        }
      } catch(e){ console.warn('getModelOptions: getModels failed', e); }

      try {
        const res = AutoHE.getResources(projectId);
        const resModels = res && res.models;
        if (models.length === 0 && Array.isArray(resModels)) {
          resModels.forEach(m => { if (m && m.id) models.push([m.name || m.id, m.id]); });
        }
      } catch(e){ console.warn('getModelOptions: getResources failed', e); }

      // –ï—Å–ª–∏ –º–æ–¥–µ–ª–µ–π –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ)
      if (models.length === 0) return '';

      return models.map(model => `<option value="${model[1]}">${model[0]}</option>`).join('');
    },
    
    getHeadOptions() {
      try {
        const res = AutoHE.getResources(projectId);
        const heads = res && Array.isArray(res.heads) ? res.heads : [];
        if (!heads.length) return '';
        return heads
          .map(h => `${h.name}.png`)
          .map(v => `<option value="${String(v).toLowerCase()}">${String(v).toLowerCase()}</option>`)
          .join('');
      } catch(_) { return ''; }
    },
    
    updateHeadVisibility() {
      const chatType = document.getElementById('chatType').value;
      const headSettings = document.querySelectorAll('.head-setting');
      
      headSettings.forEach(setting => {
        setting.style.display = chatType === 'center' ? 'block' : 'none';
      });
    },
    
    handleTabCompletion() {
      const textarea = document.getElementById('dialogTextarea');
      const cursorPos = textarea.selectionStart;
      const textBeforeCursor = textarea.value.substring(0, cursorPos);
      const currentLine = textBeforeCursor.split('\n').pop();
      
      // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏–º–µ–Ω–∞–º–∏ NPC
      const matches = [...this.npcs].filter(npc => 
        npc.toLowerCase().startsWith(currentLine.toLowerCase()) && 
        npc.toLowerCase() !== currentLine.toLowerCase()
      );
      
      if (matches.length === 1) {
        // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        const completion = matches[0];
        const lineStart = textBeforeCursor.lastIndexOf('\n') + 1;
        const newText = textarea.value.substring(0, lineStart) + 
                       completion + ': ' + 
                       textarea.value.substring(cursorPos);
        textarea.value = newText;
        textarea.selectionStart = textarea.selectionEnd = lineStart + completion.length + 2;
      } else if (matches.length > 1) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        this.showAutocomplete(matches, cursorPos, currentLine);
      }
    },
    
    showAutocomplete(matches, cursorPos, currentLine) {
      this.hideAutocomplete();
      
      const textarea = document.getElementById('dialogTextarea');
      const dropdown = document.createElement('div');
      dropdown.className = 'autocomplete-dropdown';
      dropdown.id = 'autocompleteDropdown';
      
      matches.forEach((match, index) => {
        const item = document.createElement('div');
        item.className = 'autocomplete-item';
        if (index === 0) item.classList.add('selected');
        item.textContent = match;
        item.addEventListener('click', () => {
          this.selectAutocomplete(match, cursorPos, currentLine);
        });
        dropdown.appendChild(item);
      });
      
      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const rect = textarea.getBoundingClientRect();
      const lineHeight = parseInt(getComputedStyle(textarea).lineHeight);
      const lines = textarea.value.substring(0, cursorPos).split('\n').length;
      
      dropdown.style.position = 'absolute';
      dropdown.style.left = rect.left + 'px';
      dropdown.style.top = (rect.top + (lines * lineHeight)) + 'px';
      
      document.body.appendChild(dropdown);
      this.autocompleteDropdown = dropdown;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
      textarea.addEventListener('keydown', this.handleAutocompleteKeys.bind(this));
    },
    
    handleAutocompleteKeys(e) {
      if (!this.autocompleteDropdown) return;
      
      const items = this.autocompleteDropdown.querySelectorAll('.autocomplete-item');
      let selectedIndex = [...items].findIndex(item => item.classList.contains('selected'));
      
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        items[selectedIndex].classList.remove('selected');
        selectedIndex = (selectedIndex + 1) % items.length;
        items[selectedIndex].classList.add('selected');
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        items[selectedIndex].classList.remove('selected');
        selectedIndex = selectedIndex > 0 ? selectedIndex - 1 : items.length - 1;
        items[selectedIndex].classList.add('selected');
      } else if (e.key === 'Enter') {
        e.preventDefault();
        const selectedItem = items[selectedIndex];
        if (selectedItem) {
          selectedItem.click();
        }
      }
    },
    
    selectAutocomplete(match, cursorPos, currentLine) {
      const textarea = document.getElementById('dialogTextarea');
      const lineStart = textarea.value.lastIndexOf('\n', cursorPos - 1) + 1;
      const newText = textarea.value.substring(0, lineStart) + 
                     match + ': ' + 
                     textarea.value.substring(cursorPos);
      textarea.value = newText;
      textarea.selectionStart = textarea.selectionEnd = lineStart + match.length + 2;
      this.hideAutocomplete();
    },
    
    hideAutocomplete() {
      if (this.autocompleteDropdown) {
        this.autocompleteDropdown.remove();
        this.autocompleteDropdown = null;
      }
    },
    
    async generateBlocks() {
      const textarea = document.getElementById('dialogTextarea');
      const text = textarea.value.trim();
      if (!text) {
        alert('–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤');
        return;
      }
      
      const lines = text.split('\n').filter(line => line.trim());
      const triggerType = document.getElementById('triggerType').value;
      const triggerKey = document.getElementById('triggerKey').value;
      const chatType = document.getElementById('chatType').value;
      
      // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NPC
      const npcSettings = {};
      document.querySelectorAll('.npc-item').forEach(item => {
        const name = item.querySelector('.npc-name').textContent.replace(/\s+(–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞|–Ω–æ–≤—ã–π)$/, '');
        const modelSelect = item.querySelector('.npc-model');
        const headInput = item.querySelector('.npc-head');
        const model = modelSelect && !modelSelect.disabled ? modelSelect.value : '';
        const head = headInput && !headInput.disabled ? headInput.value : '';
        npcSettings[name] = { model, head };
      });
      
      try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–ª–æ–∫–æ–≤...');
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { triggerType, triggerKey, chatType, npcSettings });
        console.log('–°—Ç—Ä–æ–∫–∏ –¥–∏–∞–ª–æ–≥–∞:', lines);
        
        const blocklyCode = this.createBlocksCode(lines, triggerType, triggerKey, chatType, npcSettings);
        console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏:', blocklyCode);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ API AutoHE
        if (currentScript && projectId && scriptId) {
          console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–∫—Ä–∏–ø—Ç:', { projectId, scriptId, currentScript: currentScript.name });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ blocksState –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
          const jsonState = JSON.stringify(blocklyCode);
          // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω–æ: –±–æ–ª—å—à–æ–π state —É–≤–æ–¥–∏–º –≤ IndexedDB
          let saveResult = null;
          try {
            if (jsonState.length > 200000) {
              await AutoHE.saveBlocksState(scriptId, jsonState);
              const updatedScript = { ...currentScript, blocksState: '__IDXDB__' };
              saveResult = AutoHE.updateScript(projectId, updatedScript);
              console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ IndexedDB, —Å—Å—ã–ª–∫–∞ –≤ script.blocksState = __IDXDB__');
            } else {
              const updatedScript = { ...currentScript, blocksState: jsonState };
              saveResult = AutoHE.updateScript(projectId, updatedScript);
              console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ blocksState');
            }
          } catch (e) {
            // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
            const updatedScript = { ...currentScript, blocksState: jsonState };
            saveResult = AutoHE.updateScript(projectId, updatedScript);
          }
          console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', saveResult);
          
          console.log('–°–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } else {
          console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', { currentScript, projectId, scriptId });
        }
        
        alert('–ë–ª–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∫—Ä–∏–ø—Ç!');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
        if (projectId && scriptId) {
          window.location.href = `editor.html?projectId=${projectId}&scriptId=${scriptId}`;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–æ–≤:', error);
        console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–∫–æ–≤: ' + error.message);
      }
    },
    
    createBlocksCode(lines, triggerType, triggerKey, chatType, npcSettings) {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–π–º–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä
      const blocklyData = {
        blocks: {
          languageVersion: 0,
          blocks: []
        }
      };
      
      const existingNPCs = this.getExistingNPCs();
      const createdNPCs = new Set();
      let yPosition = 50;
      
      // 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ NPC –±–ª–æ–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ)
      const npcBlocks = [];
      let npcYPosition = 170; // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤—Ö–æ–¥–∞
      lines.forEach(line => {
        const trimmed = line.trim();
        if (trimmed && trimmed.includes(':')) {
          const speaker = trimmed.split(':')[0].trim();
          if (speaker && speaker !== '–ò–≥—Ä–æ–∫' && speaker !== '–∏–≥—Ä–æ–∫' && 
              !createdNPCs.has(speaker) && !existingNPCs.has(speaker)) {
            const npcId = this.nameToId(speaker);
            const settings = npcSettings[speaker] || {};
            
            console.log(`–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π NPC: ${speaker} (ID: ${npcId})`);
            
            const npcBlock = {
              type: 'create_npc',
              id: `npc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
              x: 50,
              y: npcYPosition,
              fields: {
                ID: npcId,
                NAME: speaker,
                MODEL_ID: settings.model || 'minecraft:player',
                X: 0,
                Y: 64,
                Z: 0,
                SHOW_NAME: false,
                WORLD: 'overworld'
              }
            };
            
            npcBlocks.push(npcBlock);
            npcYPosition += 120;
            createdNPCs.add(speaker);
          } else if (existingNPCs.has(speaker)) {
            console.log(`NPC ${speaker} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ`);
          }
        }
      });
      
      // 2. –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
      const dialogBlocks = [];
      let dialogYPosition = npcYPosition; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Å–ª–µ NPC

      // –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É { speakerName, isPlayer, message }
      const parsed = [];
      for (const line of lines) {
        const trimmed = line.trim();
        if (!trimmed || !trimmed.includes(':')) continue;
        const [speaker, ...messageParts] = trimmed.split(':');
        const speakerName = (speaker || '').trim();
        const isPlayer = (speakerName === '–ò–≥—Ä–æ–∫' || speakerName === '–∏–≥—Ä–æ–∫');
        const message = messageParts.join(':').trim();
        parsed.push({ speakerName, isPlayer, message });
      }

      // –ü–µ—Ä–≤—ã–π NPC-—Å–ø–∏–∫–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
      const firstNpc = parsed.find(p => !p.isPlayer);

      // –ù–∞—á–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è NPC
      if (triggerType === 'rightclick' && firstNpc) {
        const triggerBlock = {
          type: 'trigger_npc_wait_interact',
          id: `trigger_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          x: 50,
          y: dialogYPosition,
          fields: { NPC: this.nameToId(firstNpc.speakerName) }
        };
        dialogBlocks.push(triggerBlock);
        dialogYPosition += 120;
      } else if (triggerType === 'key') {
        const keyBlock = {
          type: 'trigger_keybind',
          id: `key_trigger_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          x: 50,
          y: dialogYPosition,
          fields: { KEY: (triggerKey || 'F').toUpperCase() }
        };
        dialogBlocks.push(keyBlock);
        dialogYPosition += 120;
      }

      // –¢—Ä–∏–≥–≥–µ—Ä –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–ø–ª–∏–∫–æ–π –∏ —Å–∞–º –¥–∏–∞–ª–æ–≥
      let lastNpcSpeakerName = firstNpc ? firstNpc.speakerName : null;
      parsed.forEach((p, index) => {
        // –î–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ—â—ë –æ–¥–∏–Ω
        if (index > 0) {
          if (triggerType === 'rightclick') {
            // –î–ª—è —Ä–µ–ø–ª–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ ‚Äî —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É NPC, –¥–ª—è NPC ‚Äî –ø–æ —Å–∞–º–æ–º—É NPC
            const targetNpc = p.isPlayer ? (lastNpcSpeakerName ? this.nameToId(lastNpcSpeakerName) : null)
                                          : this.nameToId(p.speakerName);
            if (targetNpc) {
              const t = {
                type: 'trigger_npc_wait_interact',
                id: `trigger_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                x: 50,
                y: dialogYPosition,
                fields: { NPC: targetNpc }
              };
              dialogBlocks.push(t);
              dialogYPosition += 120;
            }
          } else if (triggerType === 'key') {
            const t = {
              type: 'trigger_keybind',
              id: `key_trigger_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
              x: 50,
              y: dialogYPosition,
              fields: { KEY: (triggerKey || 'F').toUpperCase() }
            };
            dialogBlocks.push(t);
            dialogYPosition += 120;
          }
        }

        // –°–∞–º –¥–∏–∞–ª–æ–≥-–±–ª–æ–∫
        const dialogBlock = {
          type: 'dialog_tellraw',
          id: `dialog_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          x: 50,
          y: dialogYPosition,
          fields: {
            SOURCE: p.isPlayer ? '__PLAYER_FIRST__' : this.nameToId(p.speakerName),
            TYPE: chatType === 'center' ? 'CENTER' : 'CLASSIC',
            TEXT: p.message
          }
        };
        if (!p.isPlayer && chatType === 'center') {
          const s = npcSettings[p.speakerName] || {};
          if (s.head) dialogBlock.fields.HEAD = s.head;
          dialogBlock.fields.TIME = 3;
        }
        if (p.isPlayer && chatType === 'center') {
          dialogBlock.fields.TIME = 3;
        }
        dialogBlocks.push(dialogBlock);
        dialogYPosition += 120;

        if (!p.isPlayer) lastNpcSpeakerName = p.speakerName;
      });
      
      // 3. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –≤—Ö–æ–¥–∞ –≤ –Ω–∞—á–∞–ª–æ
      const entryTrigger = {
        type: 'trigger_entry_point',
        id: `entry_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        x: 50,
        y: 50,
        fields: {}
      };
      
      // 4. –°–≤—è–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏ —á–µ—Ä–µ–∑ next, –Ω–æ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ –æ–¥–∏–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –±–ª–æ–∫ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏ JSON
      const allBlocks = [entryTrigger, ...npcBlocks, ...dialogBlocks];
      for (let i = 0; i < allBlocks.length - 1; i++) {
        allBlocks[i].next = { block: allBlocks[i + 1] };
      }
      blocklyData.blocks.blocks = allBlocks.length ? [allBlocks[0]] : [];
      
      return blocklyData;
    }
  };
  
  function initTextEditor() {
    textEditor.init();
  }
})();
